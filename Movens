{
  "openapi": "3.0.1",
  "info": {
    "title": "Movens Eye API",
    "description": "API system for Movens Eye web control panel",
    "version": "v1"
  },
  "paths": {
    "/api/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset list.",
        "description": "Sample request:\r\n            \r\n    GET /?companyId=sample-company&groupId=sample-group",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "Optional company id filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Optional group id filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of assets for the requested company and group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetInfoBody"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create a new asset with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n        \"serial\": \"VNJDE8346HH9835\"\r\n    }",
        "requestBody": {
          "description": "New asset info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfoBody"
                }
              }
            }
          },
          "400": {
            "description": "Not all required information were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/count": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset count.",
        "description": "Sample request:\r\n            \r\n    GET /count?companyId=sample-company",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "Optional company id filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object with assets count by company.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/count-by-ec": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset count by entity code.",
        "description": "Sample request:\r\n            \r\n    GET /countByEntityCode?companyId=sample-company",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "Optional company id filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "byEntityCode",
            "in": "query",
            "description": "Count by entity code and not group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object with assets count by entity code.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/codes": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return all assets entity codes.",
        "description": "Sample request:\r\n            \r\n    GET /codes",
        "responses": {
          "200": {
            "description": "Returns an object containing all entity codes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/last-seen": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset last seen message after starting value.",
        "description": "Sample request:\r\n            \r\n    GET /last-seen?starting=[ISO8601 date]&path=measures%2FSystem%2Fuptime&assetId=sample-id",
        "parameters": [
          {
            "name": "starting",
            "in": "query",
            "description": "Start time to check from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Filter value with this path.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "Optional asset id filter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing the last date when requested assets sent some data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/events-messages": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset events messages if a serial is given, or all events messages.",
        "description": "Sample request:\r\n            \r\n    GET /events-messages",
        "parameters": [
          {
            "name": "serial",
            "in": "query",
            "description": "Asset serial.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a asset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/topics": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return all assets topics or all topics of an asset.",
        "description": "Sample request:\r\n            \r\n    GET /topics?metadata=true&until=2021-09-09T17:22:33Z",
        "parameters": [
          {
            "name": "assetId",
            "in": "query",
            "description": "Asset id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Get even metadata topics.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Get topics newer than given date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset with the given id or serial number.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset id or serial number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Update asset with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"boxMacAddress\": \"0b:22:aa:99\",\r\n        \"plate\": \"ZZ000ZZ\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the asset to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset successfully updated."
          },
          "400": {
            "description": "Not all required information or some wrong one were provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The asset ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete asset with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/{id}/snapshot": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset snapshot for the given id and date.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id/snapshot?timestamp=",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp for the snapshot, default is now.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "How many days to get back to search for values, default value is 30.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a asset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/data": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Return asset data for the given request.",
        "description": "Sample request:\r\n            \r\n    POST /data\r\n    {\r\n        \"paths\": [\"measures/BMS/current\", \"measures/BMS/batteryTemperature\"]\r\n    }",
        "requestBody": {
          "description": "Requested data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDataRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDataRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDataRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing asset IDs and relative data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              }
            }
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/events": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns asset events for the given request.",
        "description": "Sample request:\r\n            \r\n    POST /events\r\n    {\r\n        \"serial\": \"VNJDE8346HH9835\",\r\n        \"starting\": \"2021-09-09T17:22:33Z\",\r\n        \"activeOnly\": false,\r\n        \"severities\": [\"low\", \"medium\"]\r\n    }",
        "requestBody": {
          "description": "Requested data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing asset IDs and relative data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/events-stats": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns asset events stats for the given request.",
        "description": "Sample request:\r\n            \r\n    POST /events-stats\r\n    {\r\n        \"starting\": \"2021-09-09T17:22:33Z\",\r\n        \"activeOnly\": false,\r\n        \"severities\": [\"low\", \"medium\"],\r\n        \"groupBySeverity\": false,\r\n        \"groupInterval\": \"month\",\r\n        \"groupTimeSlots\": [\"0-12\", \"12-24\"]\r\n    }",
        "requestBody": {
          "description": "Requested data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsStatsRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsStatsRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEventsStatsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing asset IDs and relative data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetEventsStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/active-events": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns asset active events for the given serial (optional, defaults to all assets)\r\nand date (optional, defaults to current time).",
        "description": "Sample request:\r\n            \r\n    POST /active-events\r\n    {\r\n        \"serial\": \"VNJDE8346HH9835\",\r\n        \"at\": \"2021-09-09T17:22:33Z\"\r\n    }",
        "requestBody": {
          "description": "Requested data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetActiveEventsRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetActiveEventsRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetActiveEventsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing asset IDs and relative data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/{id}/cache": {
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete asset cache with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id/cache",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset whose cache you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Delete values older than this date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested asset ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/ping": {
      "get": {
        "tags": [
          "Base"
        ],
        "summary": "Simple call used to test if service is alive.",
        "description": "Sample request:\r\n\r\n    GET /ping",
        "responses": {
          "200": {
            "description": "Returns \"pong\".",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/client-connection/filters/{clientId}/exists": {
      "get": {
        "tags": [
          "ClientConnection"
        ],
        "summary": "Check if given group id filters already exists.",
        "description": "Sample request:\r\n\r\n    GET /filters/sample-id/exists",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "SignalR client ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client ID was found."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The client ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/client-connection/filters/exists/{clientId}": {
      "get": {
        "tags": [
          "ClientConnection"
        ],
        "summary": "Check if given group id filters already exists.",
        "description": "Sample request:\r\n\r\n    GET /filters/exists/sample-id",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "SignalR client ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client ID was found."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The client ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/client-connection/filters": {
      "post": {
        "tags": [
          "ClientConnection"
        ],
        "summary": "Creates a new group id with the given filters.",
        "description": "Sample request:\r\n\r\n    POST /filters\r\n    {\r\n        \"clientId\": \"sample-id\",\r\n        \"regularExpressions\": [\"^events/@([a-zA-Z0-9]{2}(:)?)+\"]\r\n    }",
        "requestBody": {
          "description": "Filters info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FiltersBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FiltersBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FiltersBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filters successfully saved."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/client-connection/filters/{clientId}": {
      "post": {
        "tags": [
          "ClientConnection"
        ],
        "summary": "Creates a new group id with the given filters.",
        "description": "Sample request for listening topics like /measures/@{assetId-MacAddress}/BMS:\r\n\r\n    POST /filters/sample-id\r\n    [\r\n        {\r\n            \"assetId\": \"asset-id\",\r\n            \"topic\": \"measures\",\r\n            \"path\": [\"BMS\"]\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "SignalR client ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters info.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterBody"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterBody"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterBody"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filters successfully saved."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClientConnection"
        ],
        "summary": "Delete a group id from filters.",
        "description": "Sample request:\r\n\r\n    DELETE /filters/sample-id",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "SignalR client ID to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed a client."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Client ID was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/commands": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "Return commands list.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "responses": {
          "200": {
            "description": "Returns a list of commands.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Command"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Commands"
        ],
        "summary": "Create a new command with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n      \"name\": \"sample-command\",\r\n      \"assetsIds\": [\"61a4e7c07b173c5a25c80abe\"],\r\n      \"roles\": [\"ADMIN\"],\r\n      \"enabled\": true\r\n    }",
        "requestBody": {
          "description": "New command data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created command.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/commands/{id}": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "Return command with the given id.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Command id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested command.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested command was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Commands"
        ],
        "summary": "Update command with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"name\": \"sample-name\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the command to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The command was successfully updated."
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested command was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Commands"
        ],
        "summary": "Delete command with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the command to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The command was successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested command was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/commands/box-command": {
      "post": {
        "tags": [
          "Commands"
        ],
        "summary": "Send a command to one or many boxes.",
        "description": "Sample request:\r\n            \r\n    POST /box-command\r\n    {\r\n        \"group\": \"System\",\r\n        \"field\": \"Boot\",\r\n        \"value\": \"Reboot\",\r\n        \"type\": \"text\",\r\n        \"assetIds\": [\"\", \"\"],\r\n        \"arguments\": { \"force\": \"true\" }\r\n    }",
        "requestBody": {
          "description": "Command data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoxCommandBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BoxCommandBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BoxCommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command successfully sent."
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/commands/system-event": {
      "post": {
        "tags": [
          "Commands"
        ],
        "summary": "Send system event.",
        "description": "Sample request:\r\n            \r\n    POST /system-event\r\n    {\r\n        \"message\": \"RESET_CACHE\",\r\n        \"arguments\": { \"force\": \"true\" },\r\n    }",
        "requestBody": {
          "description": "Event data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemEventBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemEventBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemEventBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event successfully sent."
          },
          "400": {
            "description": "Some incorrect data was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Return company list.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "responses": {
          "200": {
            "description": "Returns a list of companies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyInfoBody"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not a super-admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create a new company with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n        \"name\": \"sample-name\",\r\n        \"adminName\": \"sample-admin\",\r\n        \"adminSurname\": \"sample-surname\",\r\n        \"adminEmail\": \"sample@email.com\"\r\n    }",
        "requestBody": {
          "description": "New company info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCreateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCreateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created company.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyInfoBody"
                }
              }
            }
          },
          "400": {
            "description": "Not all required company info was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not a super-admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/companies/current": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get current user company info.",
        "description": "Sample request:\r\n            \r\n    GET /current",
        "responses": {
          "200": {
            "description": "Returns the information about the logged user's company.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The company was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/companies/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Return company with the given id.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the company with the requested ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not a super-admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested company was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Companies"
        ],
        "summary": "Update company with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"name\": \"sample-name\",\r\n        \"code\": \"sample-code\",\r\n        \"enabled\": true\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the company to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The company was successfully updated."
          },
          "400": {
            "description": "Some wrong information was provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not a super-admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The company to be updated was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Delete company with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the company to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The company was successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or it is not a super-admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The company to be deleted was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/expressions": {
      "get": {
        "tags": [
          "Expressions"
        ],
        "summary": "Return expression list.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "responses": {
          "200": {
            "description": "Returns a list of expressions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Expression"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Expressions"
        ],
        "summary": "Create a new expression with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n      \"name\": \"sample-expression\",\r\n      \"assetsIds\": [\"61a4e7c07b173c5a25c80abe\"],\r\n      \"severity\": \"Low\",\r\n      \"structure\": [\r\n        [\r\n          {\r\n            \"topic\": \"/System/uptime\",\r\n            \"comparison\": \"GE\",\r\n            \"value\": \"2000\"\r\n          },\r\n          \"OR\",\r\n          {\r\n            \"topic\": \"/System/uptime\",\r\n            \"comparison\": \"LE\",\r\n            \"value\": \"3000\"\r\n          }\r\n        ],\r\n        \"AND\",\r\n        {\r\n          \"topic\": \"/ObbAgent/cpu\",\r\n          \"comparison\": \"GT\",\r\n          \"value\": \"50.00\"\r\n        },\r\n        \"AND\",\r\n        {\r\n          \"topic\": \"/ObbAgent/ram\",\r\n          \"comparison\": \"LE\",\r\n          \"value\": \"80000\"\r\n        }\r\n      ],\r\n      \"group\": \"System\",\r\n      \"code\": \"monitor\",\r\n      \"enabled\": true\r\n    }",
        "requestBody": {
          "description": "New expression info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionCreateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionCreateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created expression.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expression"
                }
              }
            }
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/expressions/{id}": {
      "get": {
        "tags": [
          "Expressions"
        ],
        "summary": "Return expression with the given id.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Expression id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested expression.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expression"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested expression was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Expressions"
        ],
        "summary": "Update expression with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"name\": \"sample-name\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the expression to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The expression was successfully updated."
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested expression was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Expressions"
        ],
        "summary": "Delete expression with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the expression to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The expression was successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested expression was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/expressions/validate": {
      "post": {
        "tags": [
          "Expressions"
        ],
        "summary": "Validate given expression.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n      [\r\n        [\r\n          {\r\n            \"topic\": \"/System/uptime\",\r\n            \"comparison\": \"GE\",\r\n            \"value\": \"2000\"\r\n          },\r\n          \"OR\",\r\n          {\r\n            \"topic\": \"/System/uptime\",\r\n            \"comparison\": \"LE\",\r\n            \"value\": \"3000\"\r\n          }\r\n        ],\r\n        \"AND\",\r\n        {\r\n          \"topic\": \"/ObbAgent/cpu\",\r\n          \"comparison\": \"GT\",\r\n          \"value\": \"50.00\"\r\n        },\r\n        \"AND\",\r\n        {\r\n          \"topic\": \"/ObbAgent/ram\",\r\n          \"comparison\": \"LE\",\r\n          \"value\": \"80000\"\r\n        }\r\n      ]",
        "requestBody": {
          "description": "Expression structure.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expression is validated correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expression"
                }
              }
            }
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Return group list.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "responses": {
          "200": {
            "description": "Returns a list of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInfoBody"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a new group with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n        \"name\": \"sample-group\"\r\n    }",
        "requestBody": {
          "description": "New group info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInfoBody"
                }
              }
            }
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Return group with the given id.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested group was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Update group with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"name\": \"sample-name\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the group to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The group was successfully updated."
          },
          "400": {
            "description": "Some required information was not provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete group with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group was successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/history": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Retrive measure values using a query object.",
        "description": "Sample request:\r\n\r\n    POST /\r\n    {\r\n        \"starting\": \"2021-03-01T13:00:00Z\",\r\n        \"ending\": \"2021-04-01T13:00:00Z\",\r\n        \"group\": \"Charger\",\r\n        \"field\": \"AmpereHour\",\r\n        \"plate\": \"ABC123\",\r\n        \"aggregateWindow\": \"1h\",\r\n        \"aggregateFunction\": \"mean\"\r\n    }",
        "requestBody": {
          "description": "Query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing query results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or wrong parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/history/flux-query": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Retrive measure values using query pipes.",
        "description": "Sample request:\r\n\r\n    POST /\r\n    {\r\n        \"pipes\": [\r\n            \"range(start: time(v: \\\"2022-02-28T00:00:00Z\\\"), stop: time(v: \\\"2022-02-28T04:00:00Z\\\"))\",\r\n            \"filter(fn: (r) => r.box == \\\"88:88:FF:FF:00:01\\\")\",\r\n            \"group(columns: [\\\"_start\\\"])\",\r\n            \"count(column: \\\"_value\\\")\"\r\n        ]\r\n    }",
        "requestBody": {
          "description": "Query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryFluxRequestBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryFluxRequestBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryFluxRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an object containing query results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or wrong parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/interface/sessions": {
      "get": {
        "tags": [
          "Interface"
        ],
        "summary": "Return all interface session.",
        "description": "Sample request:\r\n            \r\n    GET /sessions?panel=dashboard",
        "parameters": [
          {
            "name": "panel",
            "in": "query",
            "description": "Name of the interface panel (optional).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceSession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Interface"
        ],
        "summary": "Create a new interface session with given values.",
        "description": "Sample request:\r\n            \r\n    POST /sessions\r\n    {\r\n        name: \"value\",\r\n        panel: \"value\",\r\n        notes: \"text\",\r\n        assets: [\"value\", ...],\r\n        measures: [\"value\", ...]\r\n    }",
        "requestBody": {
          "description": "Interface session data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created the document.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceSession"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceSession"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceSession"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/interface/sessions/{id}": {
      "get": {
        "tags": [
          "Interface"
        ],
        "summary": "Return interface session info for given id.",
        "description": "Sample request:\r\n            \r\n    GET /sessions/sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the interface session document.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceSession"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Interface"
        ],
        "summary": "Update interface session values with the given data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sessions/sample-id\r\n    {\r\n        name: \"value\",\r\n        panel: \"value\",\r\n        notes: \"text\",\r\n        assets: [\"value\", ...],\r\n        measures: [\"value\", ...]\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the interface session.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Interface session data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceSessionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched the document.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Interface"
        ],
        "summary": "Remove interface session with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sessions/sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully delete the session with the given id."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/interface/templates": {
      "get": {
        "tags": [
          "Interface"
        ],
        "summary": "Return all interface template.",
        "description": "Sample request:\r\n            \r\n    GET /templates?panel=dashboard",
        "parameters": [
          {
            "name": "panel",
            "in": "query",
            "description": "Name of the interface panel (optional).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Interface"
        ],
        "summary": "Create a new interface template with given values.",
        "description": "Sample request:\r\n            \r\n    POST /templates\r\n    {\r\n        name: \"value\",\r\n        panel: \"value\",\r\n        notes: \"text\",\r\n        selection: [\r\n            { \"key\": \"value\", ...},\r\n            { \"key\": \"value\", ...},\r\n            ...\r\n        ],\r\n    }",
        "requestBody": {
          "description": "Interface template data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created the document.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceTemplate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceTemplate"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceTemplate"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/interface/templates/{id}": {
      "get": {
        "tags": [
          "Interface"
        ],
        "summary": "Return interface template info for given id.",
        "description": "Sample request:\r\n            \r\n    GET /templates/sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the interface template document.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterfaceTemplate"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Interface"
        ],
        "summary": "Update interface template values with the given data.",
        "description": "Sample request:\r\n            \r\n    PATCH /templates/sample-id\r\n    {\r\n        name: \"value\",\r\n        panel: \"value\",\r\n        notes: \"text\",\r\n        selection: [\r\n            { \"key\": \"value\", ...},\r\n            { \"key\": \"value\", ...},\r\n            ...\r\n        ],\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the interface template.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Interface template data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InterfaceTemplateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched the document.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Interface"
        ],
        "summary": "Remove interface template with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /templates/sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully delete the template with the given id."
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/plugins": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Return all plugins.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plugins list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The user is not logged as a super admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/plugins/{id}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Return plugin info for given id.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the plugin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The plugin was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The user is not logged as a super admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested plugin was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/plugins/{id}/settings": {
      "patch": {
        "tags": [
          "Plugins"
        ],
        "summary": "Update plugin settings with the given data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id/settings\r\n    {\r\n        \"keySetting1\": \"key value 1\",\r\n        \"keySetting2\": \"key value 2\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the plugin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New plugins settings.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched plugin settings."
          },
          "401": {
            "description": "User is not logged in or it is not a super-admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The user is not logged as a super admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Plugin was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/plugins/{id}/enable": {
      "patch": {
        "tags": [
          "Plugins"
        ],
        "summary": "Enable plugin with the given id.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id/enable?state=true",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the plugin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "New plugin enable state.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully patched plugin settings."
          },
          "401": {
            "description": "User is not logged in or it is not a super-admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The user is not logged as a super admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Plugin was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/analysis/{id}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Return analysis report for the given asset.",
        "description": "Sample request:\r\n            \r\n    POST /analysis/6372362763276327",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Report request data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report data file."
          },
          "400": {
            "description": "Missing report data.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found."
          }
        }
      }
    },
    "/api/reports/events": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Return events report.",
        "description": "Sample request:\r\n            \r\n    POST /events",
        "requestBody": {
          "description": "Report request data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventsReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report data file."
          },
          "400": {
            "description": "Missing report data.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Return current settings.",
        "description": "Sample request:\r\n            \r\n    GET /?keys=VUE_APP_HUB_PATH,VUE_APP_I18N_LOCALE",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "description": "A comma-separated list of keys to get.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key-value object with the requested settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "summary": "Update settings with the given data.",
        "description": "Sample request:\r\n            \r\n    PATCH /\r\n    {\r\n        \"keyName1\": \"key value 1\",\r\n        \"keyName2\": \"key value 2\"\r\n    }",
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched settings.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in or it is not a super-admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Setting key is not found or is not writable.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/favicon": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Return current fav icon.",
        "description": "Sample request:\r\n            \r\n    GET /favicon",
        "responses": {
          "200": {
            "description": "Image data."
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Do user login.",
        "description": "Sample request:\r\n            \r\n    POST /login\r\n    {\r\n        \"email\": \"sample@email.com\",\r\n        \"password\": \"s@mplePassw0rd\"\r\n    }",
        "requestBody": {
          "description": "Login info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in."
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return current logged user info.",
        "description": "Sample request:\r\n            \r\n    GET /current",
        "responses": {
          "200": {
            "description": "Returns the logged user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user data.",
        "description": "Sample request:\r\n            \r\n    PATCH /current\r\n    {\r\n        \"name\": \"Johnny\",\r\n        \"enabled\": true\r\n    }",
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The current user was successfully updated."
          },
          "400": {
            "description": "Some wrong data was provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/session": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return current session cookie.",
        "description": "Sample request:\r\n            \r\n    GET /current/session",
        "responses": {
          "200": {
            "description": "Current session cookie value..",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/logout": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Removes current user session.",
        "description": "Sample request:\r\n            \r\n    GET /current/logout",
        "responses": {
          "200": {
            "description": "User successfully logged out."
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/exists": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Check if exist a user with the given username and/or email.",
        "description": "Sample request:\r\n            \r\n    POST /exists\r\n    {\r\n        \"email\": \"sample@email.com\"\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCheckBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCheckBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCheckBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested user exists."
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested user does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return user list, filtered by logged user company.",
        "description": "Sample request:\r\n            \r\n    GET /",
        "responses": {
          "200": {
            "description": "A list of users in the current company (all users if a super-admin is logged in).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfoBody"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user with the given data.",
        "description": "Sample request:\r\n            \r\n    POST /\r\n    {\r\n        \"name\": \"John\",\r\n        \"surname\": \"Doe\",\r\n        \"role\": \"operator\",\r\n        \"email\": \"sample@email.com\"\r\n    }",
        "requestBody": {
          "description": "New user info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoBody"
                }
              }
            }
          },
          "400": {
            "description": "Not all the required data was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return user with the given id, filtered by logged user company.",
        "description": "Sample request:\r\n            \r\n    GET /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about the user with the requested ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoBody"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested user ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user with the given id and data.",
        "description": "Sample request:\r\n            \r\n    PATCH /sample-id\r\n    {\r\n        \"name\": \"Johnny\",\r\n        \"enabled\": true\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested user was successfully updated."
          },
          "400": {
            "description": "Some wrong data was provided.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user with the given id.",
        "description": "Sample request:\r\n            \r\n    DELETE /sample-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully deleted."
          },
          "401": {
            "description": "The user is not logged in or it is not an admin.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requested user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/change-password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user password.",
        "description": "Sample request:\r\n            \r\n    PATCH /current/change-password\r\n    {\r\n        \"oldPassword\": \"0ldP@ssw0rd\",\r\n        \"newPassword\": \"n3wP@ssw0rd\"\r\n    }",
        "requestBody": {
          "description": "Update data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user password was successfully changed."
          },
          "400": {
            "description": "Old or new password was not provided or the old one was incorrect.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The user is not enabled.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalysisReportRequest": {
        "required": [
          "timeEnd",
          "timeStart"
        ],
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "integer",
            "description": "Range value start.",
            "format": "int64"
          },
          "timeEnd": {
            "type": "integer",
            "description": "Range value end.",
            "format": "int64"
          },
          "selectedTopic": {
            "type": "string",
            "description": "Name of the topic used for the report.",
            "nullable": true
          },
          "targetValue": {
            "type": "string",
            "description": "Threshold value.",
            "nullable": true
          },
          "chart": {
            "type": "string",
            "description": "Chart image.",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisReportRequestValue"
            },
            "description": "Calculated values.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Info for analysis report."
      },
      "AnalysisReportRequestValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Value info for data report."
      },
      "AssetActiveEventsRequestBody": {
        "type": "object",
        "properties": {
          "serial": {
            "type": "string",
            "description": "Asset serial whose data is requested.",
            "nullable": true
          },
          "at": {
            "type": "string",
            "description": "Return values for given timestamp or now if not set.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetCreateBody": {
        "required": [
          "serial"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string",
            "description": "Asset serial."
          },
          "boxMacAddress": {
            "type": "string",
            "description": "Asset box mac address.",
            "nullable": true
          },
          "plate": {
            "type": "string",
            "description": "Asset plate.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Asset group id.",
            "nullable": true
          },
          "custom": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetDataRequestBody": {
        "required": [
          "paths"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset ids whose data is requested.",
            "nullable": true
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Paths of the requested values."
          },
          "includeMetadata": {
            "type": "boolean",
            "description": "Include also metadata in response.",
            "nullable": true
          },
          "starting": {
            "type": "string",
            "description": "If specified and ending is not set return values at the given timestamp.\r\nIf not set last saved value is returned.",
            "format": "date-time",
            "nullable": true
          },
          "ending": {
            "type": "string",
            "description": "If specified and starting is set return values between these timestamps.\r\nIgnored if starting is not set.",
            "format": "date-time",
            "nullable": true
          },
          "aggregate": {
            "type": "string",
            "description": "When the starting end ending values are set it is possible to aggregate\r\nvalues and get mean value for each requested time slice.\r\nTime slices can be defined as days (3d), month (2m), seconds (19s) and so\r\non according to flux time interval definition.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetEventsRequestBody": {
        "required": [
          "severities",
          "starting"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string",
            "description": "Asset serial whose data is requested.",
            "nullable": true
          },
          "activeOnly": {
            "type": "boolean",
            "description": "Get only active alarms."
          },
          "severities": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by event severity value (warning, low, medium, high)."
          },
          "starting": {
            "type": "string",
            "description": "Return values from given timestamp.",
            "format": "date-time"
          },
          "ending": {
            "type": "string",
            "description": "If specified return values between starting and this timestamps.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetEventsStats": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of events.",
            "format": "int32"
          },
          "timeSlot": {
            "type": "string",
            "description": "Reference time slot.",
            "nullable": true
          },
          "severity": {
            "type": "string",
            "description": "Severity value.",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "Time interval.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetEventsStatsRequestBody": {
        "required": [
          "groupInterval",
          "severities",
          "starting"
        ],
        "type": "object",
        "properties": {
          "serials": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset serials whose data is requested.",
            "nullable": true
          },
          "activeOnly": {
            "type": "boolean",
            "description": "Get only active alarms."
          },
          "severities": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by event severity value (warning, low, medium, high)."
          },
          "starting": {
            "type": "string",
            "description": "Return values from given timestamp.",
            "format": "date-time"
          },
          "ending": {
            "type": "string",
            "description": "If specified return values between starting and this timestamps.",
            "format": "date-time",
            "nullable": true
          },
          "groupBySeverity": {
            "type": "boolean",
            "description": "Group results by severity."
          },
          "groupInterval": {
            "pattern": "^(day|month|year)$",
            "type": "string",
            "description": "Specify grouping interval time (day, month, year)."
          },
          "groupTimeSlots": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set time slots to group by. A time slot must be written as starting and ending hour,\r\nfor example 3-13 means group all events between 3:00 (comprehensive) and 13:00 (excluded).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetInfoBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Asset ID.",
            "nullable": true,
            "readOnly": true
          },
          "serial": {
            "type": "string",
            "description": "Asset serial number.",
            "nullable": true,
            "readOnly": true
          },
          "plate": {
            "type": "string",
            "description": "Asset plate.",
            "nullable": true,
            "readOnly": true
          },
          "companyId": {
            "type": "string",
            "description": "Asset company ID.",
            "nullable": true,
            "readOnly": true
          },
          "groupId": {
            "type": "string",
            "description": "Asset group ID.",
            "nullable": true,
            "readOnly": true
          },
          "boxMacAddress": {
            "type": "string",
            "description": "Asset box mac address.",
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Asset properties.",
            "nullable": true
          },
          "custom": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom properties.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Time this record was created.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the creator user.",
            "nullable": true,
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Time this record was modified.",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "description": "ID of the user that has modified this record.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AssetUpdateBody": {
        "type": "object",
        "properties": {
          "boxMacAddress": {
            "type": "string",
            "description": "Asset box mac address.",
            "nullable": true
          },
          "plate": {
            "type": "string",
            "description": "Asset plate.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Company id.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Group id.",
            "nullable": true
          },
          "custom": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BoxCommandBody": {
        "required": [
          "field",
          "group",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "assetIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Destination asset ids, none for all.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Command topic group."
          },
          "field": {
            "type": "string",
            "description": "Command topic field."
          },
          "value": {
            "type": "string",
            "description": "Command value."
          },
          "type": {
            "type": "string",
            "description": "Command value type."
          },
          "arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Command arguments.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Command": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "Id of the user that created the record.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Record creation timestamp.",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Id of the user that modified the record.",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "Timestamp of last update.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Command id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Command name is: \"group/field\" for box commands and \"message\" for system events.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Command description.",
            "nullable": true
          },
          "assetEntityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset entity codes the command applies to.",
            "nullable": true
          },
          "assetIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset ids the command applies to.",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "User roles the command applies to.",
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User ids the command applies to.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled state."
          }
        },
        "additionalProperties": false
      },
      "CommandBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Command name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Command description.",
            "nullable": true
          },
          "assetEntityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset entity codes the command applies to.",
            "nullable": true
          },
          "assetIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset ids the command applies to.",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "User role the command applies to.",
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User ids the command applies to.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled state.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyCreateBody": {
        "required": [
          "adminEmail",
          "adminName",
          "adminSurname",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name."
          },
          "code": {
            "type": "string",
            "description": "Company code.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Company enabled state."
          },
          "adminName": {
            "type": "string",
            "description": "Company administrator name."
          },
          "adminSurname": {
            "type": "string",
            "description": "Company administrator surname."
          },
          "adminEmail": {
            "type": "string",
            "description": "Company administrator email.",
            "format": "email"
          },
          "adminPassword": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string",
            "description": "Company administrator password.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyInfoBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company id.",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Company name.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "Company code.",
            "nullable": true,
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Company enabled state.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "Record creation time.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "Record created by.",
            "nullable": true,
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Record modification time.",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "description": "Record modified by.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CompanyUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Company code.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Company enabled state.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventSeverityEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventsReportRequest": {
        "required": [
          "dateFormat",
          "selectedDate"
        ],
        "type": "object",
        "properties": {
          "assetDbId": {
            "type": "string",
            "description": "Optional asset id.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "List of events properties to be shown.",
            "nullable": true
          },
          "selectedDate": {
            "type": "string",
            "description": "Selected date."
          },
          "dateFormat": {
            "type": "string",
            "description": "Selected date format."
          },
          "selectedSeverities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected severities.",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "Optional searching filter.",
            "nullable": true
          },
          "totalDuration": {
            "type": "string",
            "description": "Optional total events duration.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Info for analysis report."
      },
      "Expression": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "Id of the user that created the record.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Record creation timestamp.",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Id of the user that modified the record.",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "Timestamp of last update.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Expression id.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Expression company id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Expression name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Expression description.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Event code.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Event group.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ExpressionEventType"
          },
          "severity": {
            "$ref": "#/components/schemas/EventSeverityEnum"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled state."
          },
          "assetsIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets ids to be applied to.",
            "nullable": true
          },
          "assetsEntityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets entity codes to be applied to.",
            "nullable": true
          },
          "addressees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user ids that will receive an alert.",
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Communication channels (email, push, sms) to use when an alert is rised.",
            "nullable": true
          },
          "structure": {
            "type": "array",
            "items": { },
            "description": "Expression structure.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExpressionCreateBody": {
        "required": [
          "code",
          "group",
          "name",
          "severity",
          "structure",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Expression name."
          },
          "description": {
            "type": "string",
            "description": "Expression description.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Event code."
          },
          "group": {
            "type": "string",
            "description": "Event group."
          },
          "type": {
            "pattern": "^(Single|UpDown)$",
            "type": "string",
            "description": "Event type."
          },
          "severity": {
            "$ref": "#/components/schemas/EventSeverityEnum"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled state."
          },
          "assetsIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets ids to be applied to.",
            "nullable": true
          },
          "assetsEntityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets entity codes to be applied to.",
            "nullable": true
          },
          "addressees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user ids that will receive an alert.",
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Communication channels (email, push, sms) to use when an alert is rised.",
            "nullable": true
          },
          "structure": {
            "type": "array",
            "items": { },
            "description": "Expression structure."
          }
        },
        "additionalProperties": false
      },
      "ExpressionEventType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "ExpressionUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Expression name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Expression description.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Event code.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Event group.",
            "nullable": true
          },
          "type": {
            "pattern": "^(Single|UpDown)$",
            "type": "string",
            "description": "Event type.",
            "nullable": true
          },
          "severity": {
            "pattern": "^(Trace|Low|Medium|High)$",
            "type": "string",
            "description": "Event severity.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled state.",
            "nullable": true
          },
          "assetsIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets ids to be applied to.",
            "nullable": true
          },
          "assetsEntityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assets entity codes to be applied to.",
            "nullable": true
          },
          "addressees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user ids that will receive an alert.",
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Communication channels (email, push, sms) to use when an alert is rised.",
            "nullable": true
          },
          "structure": {
            "type": "array",
            "items": { },
            "description": "Expression structure.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FilterBody": {
        "required": [
          "assetId",
          "topic"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Asset id."
          },
          "topic": {
            "type": "string",
            "description": "Topic name."
          },
          "path": {
            "type": "string",
            "description": "Path filter as regular expressions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FiltersBody": {
        "required": [
          "clientId",
          "regularExpressions"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client id."
          },
          "regularExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filters as regular expressions."
          }
        },
        "additionalProperties": false
      },
      "GroupCreateBody": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Group properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupInfoBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group id.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Group company id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Group name.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Group properties.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Group creation time.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "Group created by.",
            "nullable": true,
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Group modification time.",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "description": "Group modified by.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupUpdateBody": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Group properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoryFluxRequestBody": {
        "required": [
          "pipes"
        ],
        "type": "object",
        "properties": {
          "pipes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Range value start."
          }
        },
        "additionalProperties": false
      },
      "HistoryRequestBody": {
        "required": [
          "starting"
        ],
        "type": "object",
        "properties": {
          "starting": {
            "type": "string",
            "description": "Range value start."
          },
          "ending": {
            "type": "string",
            "description": "Range value end. If specified returns values between this and start timestamp.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Measure group (e.g. Charger).",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Measure field (e.g. AmpereHour).",
            "nullable": true
          },
          "box": {
            "type": "string",
            "description": "Asset box address (e.g. e2:a7:c4:f2:c0:2a).",
            "nullable": true
          },
          "plate": {
            "type": "string",
            "description": "Asset plate (e.g. ABC123).",
            "nullable": true
          },
          "serial": {
            "type": "string",
            "description": "Asset serial (e.g. VRWGWMZZZK0L002180).",
            "nullable": true
          },
          "aggregateWindow": {
            "type": "string",
            "description": "Measures aggregation interval (e.g. 1d, 2h, 33m, 1y).",
            "nullable": true
          },
          "aggregateFunction": {
            "type": "string",
            "description": "Measures aggregation calculated value (mean, min, max).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoryResponse": {
        "type": "object",
        "properties": {
          "time": {
            "description": "Value time.",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Value name.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "Value group.",
            "nullable": true
          },
          "value": {
            "description": "Value measure.",
            "nullable": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "All tags.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterfaceSession": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "Id of the user that created the record.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Record creation timestamp.",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Id of the user that modified the record.",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "Timestamp of last update.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Database ID.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Session company id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Session name.",
            "nullable": true
          },
          "panel": {
            "type": "string",
            "description": "Interface panel name.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Session notes.",
            "nullable": true
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected assets id.",
            "nullable": true
          },
          "measures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected measures.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterfaceSessionBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Session name.",
            "nullable": true
          },
          "panel": {
            "type": "string",
            "description": "Interface panel name.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Session notes.",
            "nullable": true
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected assets id.",
            "nullable": true
          },
          "measures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Selected measures.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterfaceTemplate": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "Id of the user that created the record.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Record creation timestamp.",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Id of the user that modified the record.",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "Timestamp of last update.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Database ID.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Template company id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Template name.",
            "nullable": true
          },
          "panel": {
            "type": "string",
            "description": "Interface panel name.",
            "nullable": true
          },
          "selection": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Template selected properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterfaceTemplateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name.",
            "nullable": true
          },
          "panel": {
            "type": "string",
            "description": "Interface panel name.",
            "nullable": true
          },
          "selection": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Template selected properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plugin id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Plugin name.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version number.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable state."
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Hash of plugin settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "SystemEventBody": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Event message."
          },
          "arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Event message arguments.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TopicInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCheckBody": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "UserCreateBody": {
        "required": [
          "email",
          "name",
          "role",
          "surname"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name."
          },
          "surname": {
            "type": "string",
            "description": "User surname."
          },
          "role": {
            "type": "string",
            "description": "User role, can be ADMIN or OPERATOR."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User visible groups.",
            "nullable": true
          },
          "password": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string",
            "description": "User password.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "User enabled state."
          }
        },
        "additionalProperties": false
      },
      "UserInfoBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User id.",
            "nullable": true,
            "readOnly": true
          },
          "companyId": {
            "type": "string",
            "description": "User company id.",
            "nullable": true,
            "readOnly": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User managed groups.",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "User name.",
            "nullable": true,
            "readOnly": true
          },
          "surname": {
            "type": "string",
            "description": "User surname.",
            "nullable": true,
            "readOnly": true
          },
          "role": {
            "type": "string",
            "description": "User role.",
            "nullable": true,
            "readOnly": true
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "nullable": true,
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "description": "User enabled state.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "Record creation time.",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "Record created by.",
            "nullable": true,
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Record modification time.",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "description": "Record modified by.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserLoginBody": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "password": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string",
            "description": "User password."
          }
        },
        "additionalProperties": false
      },
      "UserPasswordBody": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string",
            "description": "User old password."
          },
          "newPassword": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "type": "string",
            "description": "User new password."
          }
        },
        "additionalProperties": false
      },
      "UserUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name.",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "User surname.",
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User visible groups.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "User enable state.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
